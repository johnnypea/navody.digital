<meta id="authenticity-token" name="authenticity-token" content="<%= form_authenticity_token %>">

<fieldset class="govuk-fieldset">
  <div class="govuk-fieldset__legend govuk-fieldset__legend--l govuk-!-padding-bottom-6">
    <h3 class="govuk-fieldset__heading govuk-!-padding-bottom-1">
      Žiadosť o vyhotovenie kópie listiny uloženej v zbierke listín
    </h3>
  </div>
</fieldset>

<div class="govuk-form-group">
  <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
    <legend class="govuk-fieldset__legend">
      Pre ktorý subjekt (zapísanú osobu) žiadate o vyhotovenie kópie listiny uloženej v zbierke listín?
    </legend>
    <div class="govuk-form-group">
      </h1>

      <p class="govuk-label-wrapper"><label class="govuk-label govuk-label--m" for="event-name">
        Obchodné meno/IČO/Spisová značka
      </label>
      </p>
      <div id="acts_submission_business_results"></div>

      <p class="govuk-!-margin-bottom-1 govuk-!-margin-top-4">Sídlo</p>
      <input class="govuk-input " id="company-address" name="company-address" type="text" readonly>
      <input class="govuk-input hidden" id="company-ico" name="company-ico" type="text">


      <p class="govuk-!-margin-bottom-1 govuk-!-margin-top-4">Na akú e-mail adresu?</p>
      <input class="govuk-input " id="email" name="email" type="email" value="<%= current_user.logged_in? ? current_user.email : nil %>">

      <div class="govuk-checkboxes" data-module="govuk-checkboxes">

        <div id="acts_box">
        </div>
        <template id="t-acts-header">
          <p class="govuk-!-margin-top-4 govuk-!-margin-bottom-4">
            Pre ktorú listinu/listiny požadujete vyhotovenie kópie?
          </p>
        </template>

        <template id="t-acts-item">
          <div class="govuk-checkboxes__item">
            <input class="govuk-checkboxes__input" id="__company_id__" name="__company_id__" type="checkbox" value="__value__">
            <label class="govuk-label govuk-checkboxes__label" for="__company_id__">
              __title__
            </label>
          </div>
        </template>

        <!-- TODO -->
        <!-- <ul class="autocomplete__menu autocomplete__menu--overlay autocomplete__menu--visible" id="acts_submission_business__listbox" role="listbox">
             <li class="autocomplete__option" id="acts_submission_business__option--0" role="option" tabindex="-1">
             <span>100FREE s.r.o. (IČO: 50706071, spisová značka: Sro/117401/B)</span>
             </li> -->
        <!-- <li class="autocomplete__option autocomplete__option--odd" id="acts_submission_business__option--1" role="option" tabindex="-1">
             <strong>2 be free, s.r.o. (IČO: 46754857, spisová značka: Sro/104446/B)</strong>
             </li>
             <li class="autocomplete__option" id="acts_submission_business__option--2" role="option" tabindex="-1">
             <strong>AGROFREE s.r.o. (IČO: 44429282, spisová značka: Sro/23584/N)</strong>
             </li>
             <li class="autocomplete__option autocomplete__option--odd" id="acts_submission_business__option--3" role="option" tabindex="-1">
             <strong>AVE.FREEWAY SK spol. s.r.o. (IČO: 36813192, spisová značka: Sro/47231/B)</strong>
             </li>
             <li class="autocomplete__option" id="acts_submission_business__option--4" role="option" tabindex="-1">
             <strong>be FREE s.r.o. (IČO: 36732681, spisová značka: Sro/12606/S)</strong>
             </li>
             <li class="autocomplete__option autocomplete__option--odd" id="acts_submission_business__option--5" role="option" tabindex="-1">
             <strong>Be Free Tours, s.r.o. (IČO: 46817743, spisová značka: Sro/84224/B)</strong>
             </li>
             <li class="autocomplete__option" id="acts_submission_business__option--6" role="option" tabindex="-1">
             <strong>BeFree Energy s.r.o. (IČO: 52043223, spisová značka: Sro/46984/N)</strong>
             </li>
             <li class="autocomplete__option autocomplete__option--odd" id="acts_submission_business__option--7" role="option" tabindex="-1">
             <strong>BeFree family s. r. o. (IČO: 51089050, spisová značka: Sro/122994/B)</strong>
             </li>
             <li class="autocomplete__option" id="acts_submission_business__option--8" role="option" tabindex="-1">
             <strong>BeFree s. r. o. (IČO: 53022505, spisová značka: Sro/74439/L)</strong>
             </li>
             <li class="autocomplete__option autocomplete__option--odd" id="acts_submission_business__option--9" role="option" tabindex="-1">
             <strong>BeFree World Education Community s. r. o. (IČO: 50913549, spisová značka: Sro/154723/B)</strong>
             </li> -->
        <!-- </ul> -->

      </div>

      <button class="govuk-button govuk-!-margin-top-6" data-module="govuk-button" data-submit="true">
        Pokračovať ❯
      </button>
    </div>
  </fieldset>
</div>

<%= form_for @submission_form, url: upvs_submissions_new_path do |f| %>

  <%#  todo this will be appended XML by JS %>
  <%= f.hidden_field :form, value: nil %>
  <%= f.hidden_field :callback_url, value: apps_business_register_app_callback_url %>

  <%= f.hidden_field :recipient_uri %>
  <%= f.hidden_field :posp_version %>
  <%= f.hidden_field :posp_id %>
  <%= f.hidden_field :message_type %>
  <%= f.hidden_field :message_subject %>
  <%= f.submit 'Submit' %>
<% end %>

<%= javascript_include_tag 'apps/ep_vote_app/libs.js', 'data-turbolinks-track': 'reload' %>

<script type="text/javascript" charset="utf-8">

  <!-- todo reuse existing function -->
  function debounce(fn, delay) {
    let timer = null;
    return function () {
      let context = this, args = arguments;
      clearTimeout(timer);
      timer = setTimeout(function () {
        fn.apply(context, args);
      }, delay);
    };
  }

  function initAll() {
    accessibleAutocomplete({
      element: document.getElementById('acts_submission_business_results'),
      id: 'subject-search', // To match it to the existing <label>.
      source: debounce(async (query, populateResults) => {
        const res = await fetch(`/aplikacie/obchodny-register/search_business?q=${encodeURIComponent(query)}`);
        const data = (await res.json()).result;

        populateResults(data);
      }),
      onConfirm: async (result) => {
        document.getElementById('company-address').value = result?.address;
        document.getElementById('company-ico').value = result?.ico;

        const res = await fetch('/aplikacie/obchodny-register/search_acts?' + new URLSearchParams({
          oddiel: encodeURIComponent(result?.oddiel),
          vlozka: encodeURIComponent(result?.vlozka),
          sud: encodeURIComponent(result?.sud),
        }));
        const acts = (await res.json()).result;

        ACTS_ARRAY = acts

        const box = document.getElementById('acts_box')
        const tActsHeader = document.getElementById('t-acts-header').innerHTML
        const tItem = document.getElementById('t-acts-item').innerHTML
        const arrItems = acts.map(mapArtsToTemplates(tItem)).join(`\n`)
        box.innerHTML = `${tActsHeader}
${arrItems}
`

      },
      minLength: 3,
      templates: {
        inputValue: (result) => {
          return result?.name;
        },
        suggestion: (result) => {
          return `${result?.name}`
        }
      },
      confirmOnBlur: false,
      showNoOptionsFound: false,
      displayMenu: 'overlay',
      tNoResults: () => 'Žiadne výsledky',
    })
  }

  document.addEventListener('turbolinks:load', function () {
    initAll();
  });
</script>


<script type="text/javascript" charset="utf-8">
  let ACTS_ARRAY = []

  const post = async (url, data) => {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/xml',
      },
      body: JSON.stringify(data),
    })
    return response
  }

  const get = async (url) => {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
    })
    return response.json() // parses JSON response into native JavaScript objects
  }

  const mapArtsToTemplates = (template) => (it) => {
    let t = template
    t = t.replaceAll('__company_id__', `company_${it.serial_number}`) // TODO check if there isn't better id, instead of using serial number
    t = t.replace('__value__', it.serial_number)

    const delivery_date = it.delivery_date ? `, dátum doručenia: ${
      it.delivery_date.substring(0, 10)
    }` : ''
    const title = `<span class="govuk-!-font-weight-bold">${
      it.name
    }</span>, typ: ${it.type}${delivery_date}, poradové číslo: ${it.serial_number}, počet listov: ${
      it.raw.pageCount || 0
    }`
    t = t.replace('__title__', title)
    return t
  }

  const continueEventHandlerOnClick = async (event) => {
    if (!event.target.matches('[data-submit="true"]')) return
    event.preventDefault()

    // TODO add error validation and validate required elements and return error what is missing etc.
    //
    // TODO test, if you select company, select items,
    // then change the company and select new items, what will happen, if the
    // Make sure that the company list selected items resets with the change of the company.

    const company = document.getElementById('subject-search').value
    const companyAddress = document.getElementById('company-address').value
    const companyIco = document.getElementById('company-ico').value
    const email = document.getElementById('email').value
    const actsBox = document.getElementById('acts_box')
    const actsElems = actsBox.querySelectorAll(
      '.govuk-checkboxes__input'
    )
    const acts = Array.from(actsElems).map((it) => {
      const obj = ACTS_ARRAY.find(curr => curr.serial_number ===  it.value)

      return { id: obj.serial_number, name: obj.name, code: obj.serial_number, make_copy: it.checked }
    })
    // TODO make request to get xml
    console.log(acts)

    let at = document.getElementById('authenticity-token').getAttribute('content')

    res = await post('/aplikacie/obchodny-register/listiny',
      {
        authenticity_token: at,
        acts_submission: {
          business_ico: companyIco,
          business_name: company,
          business_address: companyAddress,
          email: email,
          acts: acts,
        }
      }
    ).then(res => res.text())
    console.log(res);
  }

  const main = async () => {
    document.addEventListener(
      'click',
      function (event) {
        continueEventHandlerOnClick(event)
      },
      false
    )
  }

  document.addEventListener('turbolinks:load', function () {
    main().catch(console.log)
  })
</script>
