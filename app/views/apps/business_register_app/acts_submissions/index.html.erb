<meta id="authenticity-token" name="authenticity-token" content="<%= form_authenticity_token %>">

<fieldset class="govuk-fieldset">
  <div class="govuk-fieldset__legend govuk-fieldset__legend--l govuk-!-padding-bottom-6">
    <h3 class="govuk-fieldset__heading govuk-!-padding-bottom-1">
      Žiadosť o vyhotovenie kópie listiny uloženej v zbierke listín
    </h3>
  </div>
</fieldset>

<div class="govuk-form-group">
  <fieldset id="acts-fieldset" class="govuk-fieldset" aria-describedby="waste-hint">
    <legend class="govuk-fieldset__legend">
      Pre ktorý subjekt (zapísanú osobu) žiadate o vyhotovenie kópie listiny uloženej v zbierke listín?
    </legend>
    <div class="govuk-form-group">
      <p class="govuk-label-wrapper"><label class="govuk-label govuk-label--m" for="event-name">
        Obchodné meno/IČO/Spisová značka
      </label>
      </p>
      <div id="acts_submission_business_results"></div>

      <input class="govuk-input hidden" id="company-address" name="company-address" type="text" readonly required="true">
      <input class="govuk-input hidden" id="company-cin" name="company-cin" type="text" required>
      <input class="govuk-input hidden" id="company-section" name="company-section" type="text">
      <input class="govuk-input hidden" id="company-insertion" name="company-insertion" type="text">
      <input class="govuk-input hidden" id="company-court" name="company-court" type="text">

      <div class="govuk-checkboxes" data-module="govuk-checkboxes">

        <div id="acts_box">
        </div>
        <template id="t-acts-header">
          <p class="govuk-!-margin-top-4 govuk-!-margin-bottom-4">
            Pre ktorú listinu/listiny požadujete vyhotovenie kópie?
          </p>
        </template>

        <template id="t-acts-item">
          <div class="govuk-checkboxes__item" >
            <input class="govuk-checkboxes__input" id="__company_id__" name="__company_id__" type="checkbox" value="__value__">
            <label class="govuk-label govuk-checkboxes__label" for="__company_id__">
              __title__
            </label>
          </div>
        </template>
      </div>

      <p class="govuk-!-margin-bottom-1 govuk-!-margin-top-4">Kontaktný e-mail pre posielanie notifikácií z OR SR</p>
      <input class="govuk-input " id="email" name="email" type="email" value="<%= current_user.logged_in? ? current_user.email : nil %>" required="true">

      <button id="acts-submit-button" class="govuk-button govuk-!-margin-top-6" data-module="govuk-button" data-submit="true">
        Pokračovať ❯
      </button>
    </div>
  </fieldset>
</div>

<%= form_with model: @submission_form, url: upvs_submissions_new_path, scope: 'upvs_submission', html: { id: 'new_upvs_submissions_forms_application_for_document_copy' } do |f| %>

  <%= f.hidden_field :form, value: nil %>
  <%#= f.hidden_field :callback_url, value: apps_business_register_app_callback_url %>

  <%= f.hidden_field :recipient_uri %>
  <%= f.hidden_field :posp_version %>
  <%= f.hidden_field :posp_id %>
  <%= f.hidden_field :message_type %>
  <%= f.hidden_field :message_subject %>
<% end %>

<%= javascript_include_tag 'apps/ep_vote_app/libs.js', 'data-turbolinks-track': 'reload' %>

<script type="text/javascript" charset="utf-8">

  <!-- todo reuse existing function -->
  function debounce(fn, delay) {
    let timer = null;
    return function () {
      let context = this, args = arguments;
      clearTimeout(timer);
      timer = setTimeout(function () {
        fn.apply(context, args);
      }, delay);
    };
  }

  function initAll() {
    accessibleAutocomplete({
      element: document.getElementById('acts_submission_business_results'),
      id: 'subject-search', // To match it to the existing <label>.
      source: debounce(async (query, populateResults) => {
        const res = await fetch(`/aplikacie/obchodny-register/search_business?q=${encodeURIComponent(query)}`);
        const data = (await res.json()).result;

        populateResults(data);
      }, 500),
      onConfirm: async (result) => {
        document.getElementById('company-address').value = result?.address;
        document.getElementById('company-cin').value = result?.ico;
        document.getElementById('company-section').value = result?.oddiel;
        document.getElementById('company-insertion').value = result?.vlozka;
        document.getElementById('company-court').value = result?.sud;

        const res = await fetch('/aplikacie/obchodny-register/search_acts?' + new URLSearchParams({
          oddiel: encodeURIComponent(result?.oddiel),
          vlozka: encodeURIComponent(result?.vlozka),
          sud: encodeURIComponent(result?.sud),
        }));
        const acts = (await res.json()).result;

        ACTS_ARRAY = acts

        const box = document.getElementById('acts_box')
        const tActsHeader = document.getElementById('t-acts-header').innerHTML
        const tItem = document.getElementById('t-acts-item').innerHTML
        const arrItems = acts.map(mapArtsToTemplates(tItem)).join(`\n`)
        box.innerHTML = `${tActsHeader}
${arrItems}
`

      },
      minLength: 3,
      templates: {
        inputValue: (result) => {
          return result?.name;
        },
        suggestion: (result) => {
          return `${result?.name}`
        }
      },
      confirmOnBlur: false,
      showNoOptionsFound: false,
      displayMenu: 'overlay',
      tNoResults: () => 'Žiadne výsledky',
    })
  }

  document.addEventListener('turbolinks:load', function () {
    initAll();
  });
</script>


<script type="text/javascript" charset="utf-8">
  let ACTS_ARRAY = []

  const post = async (url, data) => {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/xml',
      },
      body: JSON.stringify(data),
    })
    return response
  }

  const get = async (url) => {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
    })
    return response.json() // parses JSON response into native JavaScript objects
  }

  const mapArtsToTemplates = (template) => (it) => {
    let t = template
    t = t.replaceAll('__company_id__', `company_${it.serial_number}`) // TODO check if there isn't better id, instead of using serial number
    t = t.replace('__value__', it.serial_number)

    const delivery_date = it.delivery_date ? `, dátum doručenia: ${
      it.delivery_date.substring(0, 10)
    }` : ''
    const title = `<span class="govuk-!-font-weight-bold">${
      it.name
    }</span>, typ: ${it.type}${delivery_date}, poradové číslo: ${it.serial_number}, počet listov: ${
      it.raw.pageCount || 0
    }`
    t = t.replace('__title__', title)
    return t
  }

  const continueEventHandlerOnClick = async (event) => {
    if (!event.target.matches('[data-submit="true"]')) return
    event.preventDefault()

    // TODO add error validation and validate required elements and return error what is missing etc.

    if (validForm()) {
      const company = document.getElementById('subject-search').value
      const companyAddress = document.getElementById('company-address').value
      const companyCin = document.getElementById('company-cin').value
      const companySection = document.getElementById('company-section').value
      const companyInsertion = document.getElementById('company-insertion').value
      const companyCourt = document.getElementById('company-court').value
      const email = document.getElementById('email').value
      const actsBox = document.getElementById('acts_box')
      const actsElems = actsBox.querySelectorAll(
        '.govuk-checkboxes__input:checked'
      )
      const acts = Array.from(actsElems).map((it) => {
        const obj = ACTS_ARRAY.find(curr => curr.serial_number ===  it.value)

        return { id: obj.serial_number, name: obj.name, code: obj.serial_number, make_copy: it.checked }
      })

      let at = document.getElementById('authenticity-token').getAttribute('content')

      res = await post('/aplikacie/obchodny-register/listiny',
        {
          authenticity_token: at,
          acts_submission: {
            business_cin: companyCin,
            business_name: company,
            business_address: companyAddress,
            business_section: companySection,
            business_insertion: companyInsertion,
            business_court: companyCourt,
            email: email,
            acts: acts,
          }
        }
      ).then(res => res.text())

      document.getElementById('upvs_submission_form').value = res
      document.getElementById('new_upvs_submissions_forms_application_for_document_copy').submit();
    }
    else {
    //  Show errors
    }
  }

  const validForm = () => {
    let allAreFilled = true;

    document.getElementById("acts-fieldset").querySelectorAll("[required]").forEach(function(i) {
      if (!i.value) allAreFilled = false;
    })

    if (document.getElementById("acts-fieldset").querySelectorAll("input[type=checkbox]:checked").length < 1) allAreFilled = false;

    return allAreFilled
  }

  const main = async () => {
    document.addEventListener(
      'click',
      function (event) {
        continueEventHandlerOnClick(event)
      },
      false
    )
  }

  document.addEventListener('turbolinks:load', function () {
    main().catch(console.log)
  })
</script>
