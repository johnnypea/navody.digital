<%= render partial: 'header' %>

<legend class="govuk-fieldset__legend govuk-fieldset__legend--xl">
  <h2 class="govuk-fieldset__heading">Vyhľadávanie spoločnosti</h2>
</legend>
<br />

<%= form_for @application_form, :builder => AppFormBuilder, url: stakeholder_identifier_apps_or_sr_app_stakeholders_identifiers_path do |f| %>
  <div class="govuk-form-group">
    <p>Táto aplikácia Vám pomôže vyžiadať zápis chýbajúcich identifikačých údajov spoločníkov do Obchodného registra. Začnite s vyhľadaním Vašej firmy.</p>
    <br />

    <%= render 'components/error_summary', form: @application_form %>

    <p class="govuk-label-wrapper">
      <b>Zadajte názov spoločnosti</b>
    </p>

    <%= f.inputs_set :corporate_body do %>
      <div id="corporate_bodies_results"></div>
    <% end %>

    <%= f.hidden_field :cin, value: nil %>
    <%= f.hidden_field :current_step, value: 'subject_selection' %>

    <button id="submit-button" class="govuk-button govuk-!-margin-top-6" type="submit" data-module="govuk-button" data-submit="true">
      Pokračovať ❯
    </button>
  </div>
<% end %>

<%= javascript_include_tag 'apps/ep_vote_app/libs.js', 'data-turbolinks-track': 'reload' %>

<script type="text/javascript" charset="utf-8">
  function debounce(fn, delay) {
    let timer = null;
    return function () {
      let context = this, args = arguments;
      clearTimeout(timer);
      timer = setTimeout(function () {
        fn.apply(context, args);
      }, delay);
    };
  }

  function initAll() {
    const loadingClass = 'autocomplete__menu--loading';
    const spinnerClass = 'spinner';

    const updateStyleIfError = () => {
      if (document.getElementsByClassName('govuk-error-summary').length) {
        document.getElementsByClassName('autocomplete__wrapper')[0].classList.add('autocomplete__wrapper--error');
      }
    }

    const createSpinner = () => {
      const elements = document.getElementsByClassName(spinnerClass);

      if (elements.length) {
        return elements[0];
      }

      const spinner = document.createElement('div');
      spinner.classList.add(spinnerClass);

      return spinner;
    }

    const getLoadingStateHandler = () => {
      const spinner = createSpinner();

      const setOptionsVisibility = (shouldBeVisible) => {
        const autocompleteOptions = Array.from(document.getElementsByClassName('autocomplete__option'));
        autocompleteOptions.forEach((el) => el.style['display'] = shouldBeVisible ? 'flex' : 'none');
      }

      return (isLoading) => {
        const autocompleteMenu = document.getElementsByClassName('autocomplete__menu')[0];

        if (isLoading) {
          autocompleteMenu.classList.add(loadingClass);
          setOptionsVisibility(false);
          autocompleteMenu.append(spinner);
        } else {
          autocompleteMenu.classList.remove(loadingClass);
          spinner.remove();
          setOptionsVisibility(true);
        }
      }
    }

    let latestQuery = 0;
    let isLoading = false;

    accessibleAutocomplete({
      element: document.getElementById('corporate_bodies_results'),
      id: 'subject-search', // To match it to the existing <label>.
      source: debounce(async (query, populateResults) => {
        let setLoadingState = getLoadingStateHandler();

        if (!isLoading) {
          isLoading = true;
          setLoadingState(true);
        }

        const currentTime = new Date().getTime();
        latestQuery = currentTime;

        const res = await fetch(`<%= ENV.fetch('AUTOFORM_URL') %>/api/corporate_bodies/search?q=name:${encodeURIComponent(query)}&access_token=<%= ENV.fetch('AUTOFORM_ACCESS_TOKEN') %>`);
        const data = (await res.json());

        if (currentTime === latestQuery) {
          setLoadingState(false);
          populateResults(data);
          isLoading = false;
        }
      }, 500),
      onConfirm: async (result) => {
        document.getElementById('apps_or_sr_app_stakeholders_identifiers_application_form_cin').value = result?.cin;
      },
      minLength: 3,
      templates: {
        inputValue: (result) => {
          return `${result?.name}, IČO: ${result?.cin}`;
        },
        suggestion: (result) => {
          return `${result?.name}, IČO: ${result?.cin}`;
        }
      },
      confirmOnBlur: false,
      showNoOptionsFound: true,
      displayMenu: 'overlay',
      tNoResults: () => 'Žiadne výsledky',
    });

    updateStyleIfError();
  }

  document.addEventListener('turbolinks:load', function () {
    initAll();
  });
</script>
